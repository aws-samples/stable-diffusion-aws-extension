AWSTemplateFormatVersion: '2010-09-09'
Description: (SO8032) - Extension for Comfy on AWS - EC2 Instance
Parameters:
  StackName:
    Type: String
    Description: "The Stack Name of the ESD API"
  keyPairName:
    Description: Name of the key pair to use for the EC2 instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: Must be the name of an existing EC2 KeyPair.
  InstanceType:
    Description: EC2 Instance Type of the Comfy to deploy
    Type: String
    AllowedValues:
      - g4dn.xlarge
      - g4dn.2xlarge
      - g4dn.4xlarge
      - g5.2xlarge
      - g5.4xlarge
      - g5.8xlarge
    Default: g5.2xlarge
  NumberOfInferencePorts:
    Description: The number of inference ports
    Type: Number
    MinValue: 1
    MaxValue: 15
    Default: 1

Mappings:
  RegionToAmiId:
    ap-south-2:
      AMI: ami-09dd17e8adf1fb52d
    ap-south-1:
      AMI: ami-0a303ebf909b46aea
    eu-south-1:
      AMI: ami-088d3d25a75944f99
    eu-south-2:
      AMI: ami-099efa28cc2f1fe1d
    me-central-1:
      AMI: ami-02ec54bc0a27faa40
    ca-central-1:
      AMI: ami-0e490ef27ed5c0f5d
    eu-central-1:
      AMI: ami-09490b9a3b284c6f0
    eu-central-2:
      AMI: ami-09105ea2bc53285e6
    us-west-1:
      AMI: ami-0ff832bdf91944651
    us-west-2:
      AMI: ami-04a32162efe87cb4c
    af-south-1:
      AMI: ami-07ac148979be497a5
    eu-north-1:
      AMI: ami-0fd303abd14827300
    eu-west-3:
      AMI: ami-001368180587164c8
    eu-west-2:
      AMI: ami-0aad72a0b9d9baec1
    eu-west-1:
      AMI: ami-09b0d7d31ba756f46
    ap-northeast-3:
      AMI: ami-0d1fdff91da68b01c
    ap-northeast-2:
      AMI: ami-086cae3329a3f7d75
    me-south-1:
      AMI: ami-0515452e9b0f40e44
    ap-northeast-1:
      AMI: ami-0889fe01fe3d6b816
    sa-east-1:
      AMI: ami-0e2f00f1a5c710177
    ap-east-1:
      AMI: ami-0596fbc9bc165e0a6
    ap-southeast-1:
      AMI: ami-04d17ac01971b3b87
    ap-southeast-2:
      AMI: ami-04ba7a89b4f74783e
    ap-southeast-3:
      AMI: ami-0a854f2bba86de98f
    ap-southeast-4:
      AMI: ami-08ae3a79f5d03faa5
    us-east-1:
      AMI: ami-0e21465cede02fd1e
    us-east-2:
      AMI: ami-05fb0b8c1424f266b

Resources:

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - cloudformation:DescribeStacks
                Resource: "*"
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: "*"

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          # --- BEGIN PYTHON CODE ---
          import boto3
          import cfnresponse
          
          client = boto3.client('cloudformation')
          
          def handler(event, context):
            try:
              if event['RequestType'] == 'Delete':
                cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
                return
          
              name = event['ResourceProperties']['StackName']
              response = client.describe_stacks(StackName=name)
              stacks = response.get('Stacks')
          
              if len(stacks) == 0:
                raise Exception('StackName Not Found')
          
              S3BucketName = ''
              ApiGatewayUrl = ''
              ApiGatewayUrlToken = ''
          
              for stack in stacks:
                stack_status = stack.get('StackStatus')
                assert stack_status in ['CREATE_COMPLETE',
                'UPDATE_COMPLETE'], 'stack is not CREATE_COMPLETE or UPDATE_COMPLETE'
                outputs = stack.get('Outputs')
                if outputs:
                  for output in outputs:
                    key = output.get('OutputKey')
                    value = output.get('OutputValue')
          
                    if key == 'S3BucketName':
                      S3BucketName = value
          
                    if key == 'ApiGatewayUrl':
                      ApiGatewayUrl = value
          
                    if key == 'ApiGatewayUrlToken':
                      ApiGatewayUrlToken = value
          
              cfnresponse.send(event, context, cfnresponse.SUCCESS, {
                'S3BucketName': S3BucketName,
                'ApiGatewayUrl': ApiGatewayUrl,
                'ApiGatewayUrlToken': ApiGatewayUrlToken,
              })
            except Exception as e:
              cfnresponse.send(event, context, cfnresponse.FAILED, {'Error': str(e)}, reason=str(e))
          
            # --- END PYTHON CODE ---
      Runtime: python3.8
      Timeout: 30

  CustomResource:
    Type: Custom::MyCustomResource
    Properties:
      ServiceToken: !GetAtt LambdaFunction.Arn
      StackName: !Ref StackName

  ComfyVPC:
    Type: AWS::EC2::VPC
    DependsOn: CustomResource
    DeletionPolicy: Delete
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true

  ComfySubnet:
    Type: AWS::EC2::Subnet
    DependsOn: CustomResource
    DeletionPolicy: Delete
    Properties:
      VpcId: !Ref ComfyVPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true

  ComfyInstanceRole:
    Type: AWS::IAM::Role
    DependsOn: CustomResource
    DeletionPolicy: Delete
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: [ ec2.amazonaws.com ]
            Action: [ 'sts:AssumeRole' ]
      Path: "/"
      Policies:
        - PolicyName: PutObjectToSpecificBucket
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: [ 's3:PutObject', 's3:GetObject', 's3:ListBucket', 's3:HeadObject' ]
                Resource: [ '*' ]
        - PolicyName: EcrPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: [ 'ecr:*' ]
                Resource: [ '*' ]

  ComfyInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    DependsOn: CustomResource
    DeletionPolicy: Delete
    Properties:
      Path: "/"
      Roles:
        - !Ref ComfyInstanceRole

  ComfySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn: CustomResource
    DeletionPolicy: Delete
    Properties:
      VpcId: !Ref ComfyVPC
      GroupName: !Sub ${AWS::StackName}-sg
      GroupDescription: Security group for SD WebUI EC2 instance
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 10000
          ToPort: 11000
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  ComfyInternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: CustomResource
    DeletionPolicy: Delete

  ComfyVPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    DependsOn: CustomResource
    DeletionPolicy: Delete
    Properties:
      VpcId: !Ref ComfyVPC
      InternetGatewayId: !Ref ComfyInternetGateway

  ComfyRouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn: CustomResource
    DeletionPolicy: Delete
    Properties:
      VpcId: !Ref ComfyVPC

  ComfyRoute:
    Type: AWS::EC2::Route
    DeletionPolicy: Delete
    Properties:
      RouteTableId: !Ref ComfyRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref ComfyInternetGateway

  ComfySubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn: CustomResource
    DeletionPolicy: Delete
    Properties:
      SubnetId: !Ref ComfySubnet
      RouteTableId: !Ref ComfyRouteTable

  ComfyEC2Dev:
    Type: AWS::EC2::Instance
    DeletionPolicy: Delete
    Properties:
      InstanceType: !Ref InstanceType
      IamInstanceProfile: !Ref ComfyInstanceProfile
      SubnetId: !Ref ComfySubnet
      ImageId: !FindInMap [ RegionToAmiId, !Ref AWS::Region, AMI ]
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 1024
            VolumeType: gp2
      KeyName: !Ref keyPairName
      SecurityGroupIds:
        - !GetAtt ComfySecurityGroup.GroupId
      Tags:
        - Key: Name
          Value: !Sub "comfy-on-aws"
      UserData:
        'Fn::Base64': !Sub |
          #!/bin/bash
          set -euxo pipefail
          
          mkdir -p ~/.aws
          echo "[default]
          region = ${AWS::Region}" > ~/.aws/config

          echo "COMFY_API_URL=${CustomResource.ApiGatewayUrl}" >> /etc/environment
          echo "COMFY_API_TOKEN=${CustomResource.ApiGatewayUrlToken}" >> /etc/environment
          echo "COMFY_BUCKET_NAME=${CustomResource.S3BucketName}" >> /etc/environment
          echo "DISABLE_AUTO_SYNC=false" >> /etc/environment
          echo "DISABLE_AWS_PROXY=false" >> /etc/environment
          echo "AWS_REGION=${AWS::Region}" >> /etc/environment
          echo "PROCESS_NUMBER=${NumberOfInferencePorts}" >> /etc/environment
          echo "ESD_VERSION=dev" >> /etc/environment
          echo "SERVICE_TYPE=comfy" >> /etc/environment
          
          source /etc/environment
          
          while sudo fuser /var/lib/apt/lists/lock >/dev/null 2>&1 ; do
            echo "Waiting for other apt process to finish..."
            sleep 1
          done
          
          while sudo fuser /var/lib/dpkg/lock-frontend >/dev/null 2>&1 ; do
            echo "Waiting for other apt process to finish..."
            sleep 1
          done
          
          sudo apt update && sudo apt install nginx jq supervisor -y
          sudo wget -O /etc/nginx/sites-available/default https://raw.githubusercontent.com/awslabs/stable-diffusion-aws-extension/dev/workshop/comfy_nginx_proxy.conf
          sudo wget -O /usr/share/nginx/html/custom_502.html https://raw.githubusercontent.com/awslabs/stable-diffusion-aws-extension/dev/workshop/comfy_custom_502.html
          sudo ufw allow 'Nginx HTTP'
          sudo systemctl enable nginx
          sudo systemctl restart nginx
          
          aws ecr get-login-password --region ${AWS::Region} | docker login --username AWS --password-stdin 366590864501.dkr.ecr.${AWS::Region}.amazonaws.com
          docker pull 366590864501.dkr.ecr.${AWS::Region}.amazonaws.com/esd-inference:dev

          wget https://github.com/peak/s5cmd/releases/download/v2.2.2/s5cmd_2.2.2_Linux-64bit.tar.gz
          tar xzvf s5cmd_2.2.2_Linux-64bit.tar.gz
          cp s5cmd /usr/local/bin/
          rm -rf s5cmd_2.2.2_Linux-64bit.tar.gz
          
          s5cmd cp "s3://aws-gcr-solutions-${AWS::Region}/stable-diffusion-aws-extension-github-mainline/$ESD_VERSION/src.tar" "/tmp/src.tar"
          sudo rm -rf /root/stable-diffusion-aws-extension
          sudo mkdir -p /root/stable-diffusion-aws-extension/
          tar --overwrite -xf "/tmp/src.tar" -C "/root/stable-diffusion-aws-extension/"
          rm -rf /tmp/src.tar
          
          cat > comfy.service <<EOF
          [Unit]
          Description=Comfy Service
          After=network.target
          StartLimitIntervalSec=0

          [Service]
          WorkingDirectory=/root/stable-diffusion-aws-extension/
          ExecStart=bash docker_start.sh
          Type=simple
          Restart=always
          RestartSec=5
          User=root
          StartLimitAction=reboot

          [Install]
          WantedBy=default.target

          EOF
          sudo mv comfy.service /etc/systemd/system
          sudo chown root:root /etc/systemd/system/comfy.service
          
          sudo systemctl enable docker
          sudo systemctl start docker
          
          sudo systemctl enable comfy.service
          sudo systemctl start comfy.service
          
          # Step1: EC2 init
          # tail -f /var/log/cloud-init-output.log
          #
          # Step2: Comfy init
          # sudo journalctl -u comfy -f
          #
          # Step3: Comfy start
          # tail -f /root/stable-diffusion-aws-extension/container/*.log
          # 
          # sudo journalctl -u comfy --no-pager -n 200
          # docker images -q | xargs docker rmi -f

  ComfyEIP:
    Type: AWS::EC2::EIP
    DeletionPolicy: Delete
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "comfy-on-aws"

  ComfyEIPAssociation:
    Type: AWS::EC2::EIPAssociation
    DeletionPolicy: Delete
    Properties:
      AllocationId: !GetAtt ComfyEIP.AllocationId
      InstanceId: !Ref ComfyEC2Dev

Outputs:
  Designer:
    Description: URL for Designer
    Value: !Sub http://${ComfyEIP}:10000
  DesignerDockerfile:
    Description: Dockerfile for EC2 and SageMaker
    Value: /root/stable-diffusion-aws-extension/container/comfy_10000.Dockerfile
  NumberOfInferencePorts:
    Description: The number of inference ports
    Value: !Sub ${NumberOfInferencePorts}
  NumberOfInferencePortsStart:
    Description: The first inference start port
    Value: !Sub http://${ComfyEIP}:10001
  PageUrlOfEC2Connect:
    Description: URL of EC2 Connect Page
    Value: !Sub https://${AWS::Region}.console.aws.amazon.com/ec2/home?region=${AWS::Region}#ConnectToInstance:instanceId=${ComfyEC2Dev}
